def pipeline = load 'pipeline.groovy'
def gitCredentialsId = "${env.REPO_CREDENTIALS_ID}"

def notifyBuild(String buildStatus = 'STARTED') {
  // build status of null means successful
  buildStatus =  buildStatus ?: 'SUCCESSFUL'

  // Default values
  def colorName = 'RED'
  def colorCode = '#FF0000'
  def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
  def summary = "${subject} (${env.BUILD_URL})"
  def details = """<p>STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>"""

  // Override default values based on build status
  if (buildStatus == 'STARTED') {
    color = 'YELLOW'
    colorCode = '#FFFF00'
  } else if (buildStatus == 'SUCCESSFUL') {
    color = 'GREEN'
    colorCode = '#00FF00'
  } else {
    color = 'RED'
    colorCode = '#FF0000'
  }

  // Send notifications
  slackSend (color: colorCode, message: summary)

  emailext (
      subject: subject,
      body: details,
      recipientProviders: [[$class: 'DevelopersRecipientProvider']]
    )
}

stash excludes: 'build/**', includes: '**', name: 'sources'

stage 'compile'
node {
  try {
    notifyBuild('STARTED')
    unstash 'sources'
    pipeline.compile()
    stash includes: '**', name: 'Compilation'
  } catch (e) {
    currentBuild.result = "FAILED"
    throw e
  }
}

stage 'Unit tests'
node {
  try {
    unstash 'Compilation'
    pipeline.unitTests()
    stash includes: '**', name: 'Unit tests'
  } catch (e) {
    currentBuild.result = "FAILED"
    throw e
  }
}

stage 'Integration tests'
node {
  try {
    unstash 'Compilation'
    pipeline.integrationTests()
    stash includes: '**', name: 'Integration tests'
  } catch (e) {
    currentBuild.result = "FAILED"
    throw e
  }
}

stage 'build'
node {
  try {
    unstash 'Compilation'
    pipeline.build()
    stash includes: '**', name: 'Build'
  } catch (e) {
    notifyFailed()
    throw e
  } finally {
    notifyBuild(currentBuild.result)
  }
}
